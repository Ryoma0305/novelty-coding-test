---
export interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline-dark';
  size?: 'default' | 'small' | 'large';
  rounded?: boolean;
  class?: string;
  onClick?: string;
}

const {
  href,
  variant = 'primary',
  size = 'default',
  rounded = false,
  class: className = '',
  onClick,
} = Astro.props;

const Tag = href ? 'a' : 'button';

import styles from './Button.module.scss';

const baseClass = styles.btnArrow;

const getVariantClass = () => {
  if (rounded) {
    switch (variant) {
      case 'secondary':
        return styles.btnArrowSecondaryRounded;
      case 'outline-dark':
        return styles.btnArrowOutlineDarkRounded;
      default:
        return styles.btnArrowPrimaryRounded;
    }
  } else {
    switch (variant) {
      case 'secondary':
        return styles.btnArrowSecondary;
      case 'outline-dark':
        return styles.btnArrowOutlineDark;
      default:
        return styles.btnArrowPrimary;
    }
  }
};

const variantClass = getVariantClass();
const sizeClass =
  size === 'small'
    ? styles.btnArrowSmall
    : size === 'large'
      ? styles.btnArrowLarge
      : '';
const classes = [baseClass, variantClass, sizeClass, className]
  .filter(Boolean)
  .join(' ');
---

<Tag href={href} class={classes} onclick={onClick}>
  <slot />
  <span class={styles.btnArrowIcon}>
    <svg
      width="14"
      height="14"
      viewBox="0 0 14 14"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
    >
      <path
        d="M2 1.95508H12M12 1.95508V11.9551M12 1.95508L2 11.9551"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </span>
</Tag>
